<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js数组去重</title>
      <link href="/2021/07/06/js-Set-Source/"/>
      <url>/2021/07/06/js-Set-Source/</url>
      
        <content type="html"><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>优点：简单，性能好 缺点1：在IE6-8下数组的indexOf方法不存在 缺点2：相同的字符串类型数值和数字类型的数值不会去重</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> unique<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        var item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret.indexOf<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> -1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret.push<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin class-name">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>优化方法一：在IE6-8下数组的indexOf方法不存在时，手动添加indexOf实现方法 缺点2：相同的字符串类型数值和数字类型的数值不会去重</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var indexOf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>.indexOf ?    <span class="token keyword">function</span> <span class="token punctuation">(</span>arr, item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">return</span> arr.indexOf<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token builtin class-name">:</span>    <span class="token keyword">function</span> indexOf<span class="token punctuation">(</span>arr, item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token builtin class-name">return</span> i            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token builtin class-name">return</span> -1    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> unique<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        var item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexOf<span class="token punctuation">(</span>ret, item<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> -1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret.push<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin class-name">return</span> ret<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><p>优化方法二：写2个函数方法表示很繁琐，可以使用使用对象属性来判断 缺点：相同的字符串类型数值和数字类型的数值不会去重</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> unique<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    var <span class="token builtin class-name">hash</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        var item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        var key <span class="token operator">=</span> typeof <span class="token punctuation">(</span>item<span class="token punctuation">)</span> + item<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret.push<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin class-name">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h1><p>优化：简单，简洁快捷 缺点1：兼容低版本浏览器差 缺点2：相同的字符串类型数值和数字类型的数值不会去重</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> unique<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.new Set<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h1><p>优点：兼容性好 优化点：相同的字符串类型数值和数字类型的数值会去重</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> unique<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">let</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token builtin class-name">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret.push<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin class-name">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考<br>JS去重的方法有非常多种，以上的5种仅是代表不同的差异。我觉得需要结合实际项目需求开发，根据需求来选择哪种去重方法，根据需求来修改某些条件，或者增加条件，适合需求的才是最好的去重方法。</p><p>最简单的，我不用适配低版本浏览器，也不考虑严格的数据类型值，直接用 …new Set(arr) 最快啦~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
